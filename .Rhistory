df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
df = data.frame(df,dfn)
colnames(df)[1] <- 'alleles'
df
ref  <- substr(df$alleles,1,1)
alt  <- substr(df$alleles,3,3)
dfn
sapply(dfn,f)
apply(dfn,2,f)
dfn
alt
dfn
dput(dfn)
dfn
dput(ref)
dput(alt)
sapply(dfn,f)
f = function(x){
if (x==ref) {return(2)
}
else if (x==alt) {return(0)
}
else {
return(x)
}
}
sapply(dfn,f)
sapply(dfn,f)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
sapply(dfn,f)
dfn
ref
sapply(dfn,f)
f = function(x){
x = ifelse(x%in%ref,2,x)
x = ifelse(x%in%alt,0,x)
return(x)
}
sapply(dfn,f)
dfn$GID7173723
dfn$GID7173723%in%ref
dfn$GID7173723==ref
dfn$GID4878677%in%ref
dfn
ref
dfn$GID4878677%in%ref
dfn$GID4878677==ref
require(here)
df_gbs = data.frame(read.delim(here('data','hapmap','Beagle.hmp'),header=T,stringsAsFactors = F))
class(df_gbs)
str(df_gbs)
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:5]
df_num = df_gbs[,-1:-11]
df_col[1:5,1:5]
df_num[1:5,1:5]
# Numeric encoding to transform  hapmap format into a SNP allele count matrix
# Numeric encoding to 1, for all heterozygotes and NA for missing data
# for missing value
df_num[df_num=='N'] = NA
df_num[df_num=='.'] = NA
df_num[df_num=='-'] = NA
# for tri-allelic sites
df_num[df_num=='B'] = NA
df_num[df_num=='D'] = NA
df_num[df_num=='H'] = NA
df_num[df_num=='V'] = NA
# for heterozygous sites
df_num[df_num=='R'] = 1
df_num[df_num=='Y'] = 1
df_num[df_num=='S'] = 1
df_num[df_num=='W'] = 1
df_num[df_num=='K'] = 1
df_num[df_num=='M'] = 1
df_col[1:5,1:5]
df_num[1:5,1:5]
str(df_num)
df_num[df_num=='R']
dfn
dfn = df_num[1:5,1:5]
dfn
dfn[dfn=='A']
dfn=='A'
df_col$alleles
ref  <- substr(df_col$alleles,1,1)
alt  <- substr(df_col$alleles,3,3)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
df_num[is.na(df_num)]
df_num <- sapply(df_num,f)
str(df_num)
df_num[1:5,1:5]
meanv <- round(mean(dfn, na.rm = TRUE),0)
meanv
dfn
dfn <- sapply(dfn,f)
dfn
dfn = df_num[1:5,1:5]
df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
df = data.frame(df,dfn)
colnames(df)[1] <- 'alleles'
df
ref  <- substr(df$alleles,1,1)
alt  <- substr(df$alleles,3,3)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
sapply(dfn,f)
df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
df = data.frame(df,dfn)
colnames(df)[1] <- 'alleles'
df
dfn
sapply(dfn,f)
as.numeric(dfn)
str(dfn)
class(dfn)
dfn
transform?
?transform
dput(dfn)
?sapply
dfn
apply(dfn,2,f)
dfn <- apply(dfn,2,f)
class(fdn)
class(dfn)
?apply
sapply(dfn,f,simplify = TRUE)
df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
require(here)
df_gbs = data.frame(read.delim(here('data','hapmap','Beagle.hmp'),header=T,stringsAsFactors = F))
class(df_gbs)
str(df_gbs)
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:5]
df_num = df_gbs[,-1:-11]
df_col[1:5,1:5]
df_num[1:5,1:5]
df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
df = data.frame(df,dfn)
colnames(df)[1] <- 'alleles'
df
ref  <- substr(df$alleles,1,1)
alt  <- substr(df$alleles,3,3)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
dfn
dfn <- sapply(dfn,f,simplify = TRUE)
dfn
class(dfn)
str(dfn)
require(here)
df_gbs = data.frame(read.delim(here('data','hapmap','Beagle.hmp'),header=T,stringsAsFactors = F))
class(df_gbs)
str(df_gbs)
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:5]
df_num = df_gbs[,-1:-11]
df_col[1:5,1:5]
df_num[1:5,1:5]
df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
df = data.frame(df,dfn)
colnames(df)[1] <- 'alleles'
df
ref  <- substr(df$alleles,1,1)
alt  <- substr(df$alleles,3,3)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
dfn
s <- sapply(dfn,f,simplify = TRUE)
class(dfn)
a <- apply(dfn,2,f)
class(a)
s
str(s)
str(a)
as.numeric(s)
data.matrix(s)
mode(s) = 'numeric'
s
mode(a) = 'numeric'
a
data.frame(s)
s
data.frame(a)
a
str(a)
str(s)
s
class(s)
class(a)
?class
typeof(a)
mode(a)
mode(s)
typeof(s)
require(here)
df_gbs = data.frame(read.delim(here('data','hapmap','Beagle.hmp'),header=T,stringsAsFactors = F))
class(df_gbs)
str(df_gbs)
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:5]
df_num = df_gbs[,-1:-11]
df_col[1:5,1:5]
df_num[1:5,1:5]
# Numeric encoding to transform  hapmap format into a SNP allele count matrix
# 1 to all heterozygotic sites and NA for missing data
# for missing value
df_num[df_num=='N'] = NA
df_num[df_num=='.'] = NA
df_num[df_num=='-'] = NA
# for tri-allelic sites
df_num[df_num=='B'] = NA
df_num[df_num=='D'] = NA
df_num[df_num=='H'] = NA
df_num[df_num=='V'] = NA
# for heterozygous sites
df_num[df_num=='R'] = 1
df_num[df_num=='Y'] = 1
df_num[df_num=='S'] = 1
df_num[df_num=='W'] = 1
df_num[df_num=='K'] = 1
df_num[df_num=='M'] = 1
# Let's save the reference and alternative allele form column alleles in df_col into different objects
ref  <- substr(df_col$alleles,1,1)
alt  <- substr(df_col$alleles,3,3)
# Create a function to evaluate if the allele is the reference or the alternative and run sapply
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
df_num <- sapply(df_num,f)
require(here)
df_gbs = data.frame(read.delim(here('data','hapmap','Beagle.hmp'),header=T,stringsAsFactors = F))
class(df_gbs)
str(df_gbs)
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:5]
df_num = df_gbs[,-1:-11]
df_col[1:5,1:5]
df_num[1:5,1:5]
# Numeric encoding to transform  hapmap format into a SNP allele count matrix
# 1 to all heterozygotic sites and NA for missing data
# for missing value
df_num[df_num=='N'] = NA
df_num[df_num=='.'] = NA
df_num[df_num=='-'] = NA
# for tri-allelic sites
df_num[df_num=='B'] = NA
df_num[df_num=='D'] = NA
df_num[df_num=='H'] = NA
df_num[df_num=='V'] = NA
# for heterozygous sites
df_num[df_num=='R'] = 1
df_num[df_num=='Y'] = 1
df_num[df_num=='S'] = 1
df_num[df_num=='W'] = 1
df_num[df_num=='K'] = 1
df_num[df_num=='M'] = 1
# Let's save the reference and alternative allele form column alleles in df_col into different objects
ref  <- substr(df_col$alleles,1,1)
alt  <- substr(df_col$alleles,3,3)
# Create a function to evaluate if the allele is the reference or the alternative and run sapply
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
df_num <- sapply(df_num,f,simplify = TRUE)
# tranform the the characthers into numbers
mode(df_num) = 'numeric'
str(df_num)
class(df_num)
typeof(df_num)
df_num[1:5,1:5]
a
df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
df = data.frame(df,dfn)
colnames(df)[1] <- 'alleles'
df
ref  <- substr(df$alleles,1,1)
alt  <- substr(df$alleles,3,3)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
dfn
s <- sapply(dfn,f,simplify = TRUE)
class(dfn)
a <- apply(dfn,2,f)
mode(s) = 'numeric'
mode(a) = 'numeric'
a
data.frame(s)
s
data.frame(a)
a
a
a[1:3]
a[1,3]
a[1,3] <- NA
a[2,1] <- NA
apply(a, 1, mean)
a
a[4,5] <- 0
a
a[4,5] <- 20
a
apply(a, 1, mean)
28/5
apply(a, 1, mean(na.rm=T))
apply(a, 1, function(x) mean(x,na.rm = T))
apply(a, 2, function(x) mean(x,na.rm = T))
6/5
require(here)
df_gbs = data.frame(read.delim(here('data','hapmap','Beagle.hmp'),header=T,stringsAsFactors = F))
class(df_gbs)
str(df_gbs)
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:5]
df_num = df_gbs[,-1:-11]
df_col[1:5,1:5]
df_num[1:5,1:5]
# for missing value
df_num[df_num=='N'] = NA
df_num[df_num=='.'] = NA
df_num[df_num=='-'] = NA
# for tri-allelic sites
df_num[df_num=='B'] = NA
df_num[df_num=='D'] = NA
df_num[df_num=='H'] = NA
df_num[df_num=='V'] = NA
# for heterozygous sites
df_num[df_num=='R'] = 1
df_num[df_num=='Y'] = 1
df_num[df_num=='S'] = 1
df_num[df_num=='W'] = 1
df_num[df_num=='K'] = 1
df_num[df_num=='M'] = 1
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:4]
df_col[1:5,1:5]
df_col[1:5,1:4]
ref  <- substr(df_col$alleles,1,1)
alt  <- substr(df_col$alleles,3,3)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
df_num <- sapply(df_num,f,simplify = TRUE)
47040*0.85
39984/12
df = df_col[1:5,2]
dfn = df_num[1:5,1:5]
df = data.frame(df,dfn)
colnames(df)[1] <- 'alleles'
df
ref  <- substr(df$alleles,1,1)
alt  <- substr(df$alleles,3,3)
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
dfn
s <- sapply(dfn,f,simplify = TRUE)
class(dfn)
a <- apply(dfn,2,f)
mode(s) = 'numeric'
mode(a) = 'numeric'
a
data.frame(s)
s
data.frame(a)
a
a[1,3] <- NA
a[2,1] <- NA
a[4,5] <- 20
a
a
apply(a, 2, function(x) round(mean(x,na.rm = T)))
apply(a, 1, function(x) round(mean(x,na.rm = T)))
apply(a, 1, function(x) round(mean(x,na.rm = T)))
df_num[is.na(df_num)]
df_num[is.nan(df_num)]
df_num[is.null(df_num)]
apply(a, 1, function(x) round(mean(x,na.rm = T)))
apply(a, 1, function(x) round(1-mean(x,na.rm = T)/2))
a
apply(a, 1, function(x) round(mean(x,na.rm = T)))
apply(a, 1, function(x) round(1-mean(x,na.rm = T)/2))
apply(a, 1, function(x) 1-mean(x,na.rm = T)/2)
apply(a, 1, function(x) 1-(mean(x,na.rm = T)/2))
MAF <- apply(df_num, 1, function(x) 1-mean(x)/2)
warnings()
df_num[1:5,1:5]
require(here)
df_gbs = data.frame(read.delim(here('data','hapmap','Beagle.hmp'),header=T,stringsAsFactors = F))
class(df_gbs)
str(df_gbs)
# first eleven rows are not needed for the numerical conversion, the first 5 columns we will need later.
df_col = df_gbs[,1:4]
df_num = df_gbs[,-1:-11]
df_col[1:5,1:4]
df_num[1:5,1:5]
# Numeric encoding to transform  hapmap format into a SNP allele count matrix
# 1 to all heterozygotic sites and NA for missing data
# for missing value
df_num[df_num=='N'] = NA
df_num[df_num=='.'] = NA
df_num[df_num=='-'] = NA
# for tri-allelic sites
df_num[df_num=='B'] = NA
df_num[df_num=='D'] = NA
df_num[df_num=='H'] = NA
df_num[df_num=='V'] = NA
# for heterozygous sites
df_num[df_num=='R'] = 1
df_num[df_num=='Y'] = 1
df_num[df_num=='S'] = 1
df_num[df_num=='W'] = 1
df_num[df_num=='K'] = 1
df_num[df_num=='M'] = 1
# Let's save the reference and alternative allele form column alleles in df_col into different objects
ref  <- substr(df_col$alleles,1,1)
alt  <- substr(df_col$alleles,3,3)
# Create a function to evaluate if the allele is the reference or the alternative and run sapply
f = function(x){
x = ifelse(x==ref,2,x)
x = ifelse(x==alt,0,x)
return(x)
}
df_num <- sapply(df_num,f,simplify = TRUE)
# transform the the characters into numbers
mode(df_num) = 'numeric'
df_num[1:5,1:5]
# checking for na values
df_num[is.na(df_num)]
df_num[is.nan(df_num)]
df_num[is.null(df_num)]
# Calculate minor allele-frequency
MAF <- apply(df_num, 1, function(x) 1-mean(x)/2)
MAF[1:10]
# Proportion of MAF >0.05
table(MAF>0.05)
rowsum(df_num)
dim(df_num)
40530+24645
length(df_num)
dim(df_num)
dim(df_num)[1]
# Proportion of MAF >0.05
table(MAF>0.05)/nrow(MAF)
# Proportion of MAF >0.05
table(MAF>0.05)
# Proportion of MAF >0.05
prop.table(MAF>0.05)
# Proportion of MAF >0.05
prop.table(MAF>0.05)
# Proportion of MAF >0.05
prop.table(table(MAF>0.05))
MAF[1:10]
MAF
MAF[1:5]
df_num[1:5,1:5]
MAF>0.05
length(MAF)
length(MAF) == nrow(df_num)
dim(df_num)
length(MAF>0.05)
# Proportion of MAF >0.05 = 62%
table(MAF>0.05)
df_num <- df_num[MAF>0.05,]
dim(df_num)
dim(df_col)
df_col <- df_col[MAF>0.05,]
dim(df_col)
df <- cbind(df_col,df_num)
df[1:5,1:10]
?save
save(df,file = here('rda_objects','numeric_hapmap','df.rda'))
load(file = 'rda_objects/numeric_hapmap/df.rda')
df[1:5,1:10]
1200/21
57*21
57.14*21
